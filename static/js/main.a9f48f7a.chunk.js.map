{"version":3,"sources":["store/gallery.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","Object","classCallCheck","this","_photos","_searchTerm","fetchPhotos","_this","axios","get","then","res","photos","shuffle","data","str","toLowerCase","arr","_this2","searchTerm","filter","photo","author","split","reduce","flag","cur","startsWith","decorate","observable","computed","Store","gallery","store","App","props","possibleConstructorReturn","getPrototypeOf","call","loadMore","setState","oldState","page","toggleGray","isGray","search","e","value","target","state","numOfPhotos","photosUi","slice","map","react_default","a","createElement","Grid_default","key","id","item","Card_default","style","width","CardMedia_default","height","image","concat","title","CardContent_default","Typography_default","component","className","container","justify","spacing","xs","sm","md","lg","xl","TextField_default","label","type","margin","variant","onChange","FormControlLabel_default","control","Checkbox_default","checked","gutterBottom","fontWeight","length","Button_default","onClick","color","Component","inject","observer","Boolean","window","location","hostname","match","ReactDOM","render","index_module","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAIMA,aACJ,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbG,KAAKC,QAAc,GACnBD,KAAKE,YAAc,GAEnBF,KAAKG,wEAGO,IAAAC,EAAAJ,KACZK,IAAMC,IAAI,8BACPC,KAAK,SAACC,GAAD,OAASJ,EAAKK,OAASC,kBAAQF,EAAIG,yCAG9BC,GACbZ,KAAKE,YAAcU,EAAIC,8BAIvB,OAAOb,KAAKE,yCAGHY,GACTd,KAAKC,QAAUa,kBAGJ,IAAAC,EAAAf,KACX,OAAKA,KAAKgB,WAEHhB,KAAKC,QAAQgB,OAAO,SAACC,GAC1B,IAAMF,EAAsBD,EAAKb,YAKjC,OAJ4BgB,EAAMC,OACKN,cACOO,MAAM,KAEzBC,OAAO,SAACC,EAAMC,GACvC,OAAOD,GAAQC,EAAIC,WAAWR,KAC7B,KAVwBhB,KAAKC,iBAetCwB,YAAS5B,EAAS,CAChBI,QAASyB,IACTxB,YAAawB,IACbjB,OAAQkB,IACRX,WAAYW,MAGC9B,QChDT+B,wCACJC,QAAU,IAAIhC,GAGhB4B,YAASG,EAAO,CAAEC,QAASH,MAEZ,IAAAI,EAAA,IAAIF,oMCKbG,sBACJ,SAAAA,EAAYC,GAAO,IAAA5B,EAAA,OAAAN,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACjB3B,EAAAN,OAAAmC,EAAA,EAAAnC,CAAAE,KAAAF,OAAAoC,EAAA,EAAApC,CAAAiC,GAAAI,KAAAnC,KAAMgC,KAKRI,SAAW,WACThC,EAAKiC,SAAS,SAACC,GAAD,MAAe,CAAEC,KAAMD,EAASC,KAAO,MAPpCnC,EAUnBoC,WAAa,WACXpC,EAAKiC,SAAS,SAACC,GAAD,MAAe,CAAEG,QAASH,EAASG,WAXhCrC,EAcnBsC,OAAS,SAACC,GAAM,IACNC,EAAUD,EAAEE,OAAZD,MAERxC,EAAK4B,MAAMF,MAAMD,QAAQb,WAAa4B,EAGjCA,GAAOxC,EAAKiC,SAAS,SAACC,GAAD,MAAe,CAAEC,KAAM,MAjBjDnC,EAAK0C,MAAQ,CAAEP,KAAM,EAAGE,QAAQ,GAHfrC,wEAuBV,IAAAW,EAAAf,KACDS,EAAYT,KAAKgC,MAAMF,MAAMD,QAA7BpB,OACFsC,EAAgC,GAAlB/C,KAAK8C,MAAMP,KAEzBS,EAAWvC,EAAOwC,MAAM,EAAGF,GAAaG,IAAI,SAAChC,GAAD,OAC9CiC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,IAAKrC,EAAMsC,GAAIC,MAAI,GACvBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAMO,MAAO,CAAEC,MAAO,UACpBT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEO,MAAO,CAAEG,OAAQ,SACjBC,MAAK,yBAAAC,OAA2BjD,EAAK+B,MAAML,OAAS,KAAO,GAAtD,kBAAAuB,OAAyE9C,EAAMsC,IACpFS,MAAM,0BAERd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KACED,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAYgB,UAAU,KACnBlD,EAAMC,aAOjB,OACEgC,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkB,WAAS,EAACC,QAAQ,SAASC,QAAS,IACxCrB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMK,MAAI,EAACgB,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3C1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACEO,MAAO,CAAEC,MAAO,QAChBJ,GAAG,kBACHuB,MAAM,gBACNC,KAAK,SACLX,UAAU,GACVY,OAAO,SACPC,QAAQ,WACRC,SAAU,SAACxC,GAAD,OAAO5B,EAAK2B,OAAOC,QAKnCQ,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkB,WAAS,EAACC,QAAQ,SAASC,QAAS,IACxCrB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMK,MAAI,EAACgB,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3C1B,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CACEiC,QACElC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CACEmC,QAASvF,KAAK8C,MAAML,OACpB0C,SAAUnF,KAAKwC,aAEnBuC,MAAM,gBAIZ5B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkB,WAAS,EAACC,QAAQ,SAASC,QAAS,IACxCrB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMK,MAAI,GACRN,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAY8B,QAAQ,KAAKM,cAAY,GAArC,cACarC,EAAAC,EAAAC,cAAA,QACXM,MAAO,CAAE8B,WAAY,MAAQzC,EAAS0C,QAFxC,aAOJvC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkB,WAAS,EAACC,QAAQ,SAASC,QAAS,IACvCxB,GAGHG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkB,WAAS,EAACC,QAAQ,SAASC,QAAS,IACxCrB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMK,MAAI,GACRN,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAQwC,QAAS5F,KAAKoC,SAAU8C,QAAQ,YAChCW,MAAM,WADd,uBAzFMC,cAkGHC,cAAO,QAAPA,CAAgBC,YAASjE,ICrGpBkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACPpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAU1E,MAAOF,GACfuB,EAAAC,EAAAC,cAACoD,EAAD,OAEAC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvG,KAAK,SAAAwG,GACjCA,EAAaC","file":"static/js/main.a9f48f7a.chunk.js","sourcesContent":["import { shuffle } from 'lodash';\r\nimport { decorate, observable, computed } from \"mobx\";\r\nimport axios from 'axios'\r\n\r\nclass Gallery {\r\n  constructor() {\r\n    this._photos     = [];\r\n    this._searchTerm = '';\r\n\r\n    this.fetchPhotos();\r\n  }\r\n\r\n  fetchPhotos() {\r\n    axios.get('https://picsum.photos/list')\r\n      .then((res) => this.photos = shuffle(res.data));\r\n  }\r\n\r\n  set searchTerm(str) {\r\n    this._searchTerm = str.toLowerCase();\r\n  }\r\n\r\n  get searchTerm() {\r\n    return this._searchTerm;\r\n  }\r\n\r\n  set photos(arr) {\r\n    this._photos = arr;\r\n  }\r\n\r\n  get photos() {\r\n    if (!this.searchTerm) return this._photos;\r\n\r\n    return this._photos.filter((photo) => {\r\n      const searchTerm          = this._searchTerm;\r\n      const authorName          = photo.author;\r\n      const authorNameLowered   = authorName.toLowerCase();\r\n      const authorNameSeparated = authorNameLowered.split(' ');\r\n\r\n      return authorNameSeparated.reduce((flag, cur) => {\r\n        return flag || cur.startsWith(searchTerm);\r\n      }, false)\r\n    });\r\n  }\r\n}\r\n\r\ndecorate(Gallery, {\r\n  _photos: observable,\r\n  _searchTerm: observable,\r\n  photos: computed,\r\n  searchTerm: computed\r\n});\r\n\r\nexport default Gallery;","import { observable, decorate } from 'mobx';\r\n\r\nimport Gallery from './gallery';\r\n\r\nclass Store {\r\n  gallery = new Gallery();\r\n}\r\n\r\ndecorate(Store, { gallery: observable});\r\n\r\nexport default new Store();\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { page: 1, isGray: false }\r\n  }\r\n\r\n  loadMore = () => {\r\n    this.setState((oldState) => ({ page: oldState.page + 1 }))\r\n  };\r\n\r\n  toggleGray = () => {\r\n    this.setState((oldState) => ({ isGray: !oldState.isGray }))\r\n  };\r\n\r\n  search = (e) => {\r\n    const { value } = e.target;\r\n\r\n    this.props.store.gallery.searchTerm = value;\r\n\r\n    // reset page counter when search is cleared\r\n    if (!value) this.setState((oldState) => ({ page: 1 }));\r\n  };\r\n\r\n  render() {\r\n    let { photos }  = this.props.store.gallery;\r\n    let numOfPhotos = this.state.page * 30;\r\n\r\n    let photosUi = photos.slice(0, numOfPhotos).map((photo) =>\r\n      <Grid key={photo.id} item>\r\n        <Card style={{ width: '300px' }}>\r\n          <CardMedia\r\n            style={{ height: '300px' }}\r\n            image={`https://picsum.photos/${this.state.isGray ? 'g/' : ''}300/300?image=${photo.id}`}\r\n            title=\"Contemplative Reptile\"\r\n          />\r\n          <CardContent>\r\n            <Typography component=\"p\">\r\n              {photo.author}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid container justify=\"center\" spacing={16}>\r\n          <Grid item xs={12} sm={10} md={8} lg={5} xl={3}>\r\n            <TextField\r\n              style={{ width: '100%' }}\r\n              id=\"outlined-search\"\r\n              label=\"Search photos\"\r\n              type=\"search\"\r\n              className=\"\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              onChange={(e) => this.search(e)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" spacing={16}>\r\n          <Grid item xs={12} sm={10} md={8} lg={5} xl={3}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={this.state.isGray}\r\n                  onChange={this.toggleGray}/>\r\n              }\r\n              label=\"Gray mode\"/>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" spacing={16}>\r\n          <Grid item>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              displaying <span\r\n              style={{ fontWeight: 600 }}>{photosUi.length}</span> images\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" spacing={16}>\r\n          {photosUi}\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" spacing={16}>\r\n          <Grid item>\r\n            <Button onClick={this.loadMore} variant=\"contained\"\r\n                    color=\"primary\">Load more</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject('store')(observer(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'mobx-react';\r\nimport Store from './store';\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={Store}>\r\n    <App/>\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}