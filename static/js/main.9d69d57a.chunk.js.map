{"version":3,"sources":["store/gallery.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","Object","classCallCheck","this","_photos","_searchTerm","fetchPhotos","_this","axios","get","then","res","photos","shuffle","data","str","toLowerCase","arr","_this2","searchTerm","filter","photo","author","includes","decorate","observable","computed","Store","gallery","store","App","props","possibleConstructorReturn","getPrototypeOf","call","loadMore","setState","oldState","page","toggleGray","isGray","search","e","value","target","state","numOfPhotos","photosUi","slice","map","react_default","a","createElement","Grid_default","key","id","item","Card_default","style","width","CardMedia_default","height","image","concat","title","CardContent_default","Typography_default","component","className","container","justify","spacing","xs","sm","md","lg","xl","TextField_default","label","type","margin","variant","onChange","FormControlLabel_default","control","Checkbox_default","checked","gutterBottom","fontWeight","length","Button_default","onClick","color","Component","inject","observer","Boolean","window","location","hostname","match","ReactDOM","render","index_module","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d69d57a.chunk.js","sourcesContent":["import { shuffle } from 'lodash';\nimport { decorate, observable, computed } from \"mobx\";\nimport axios from 'axios'\n\nclass Gallery {\n  constructor() {\n    this._photos     = [];\n    this._searchTerm = '';\n\n    this.fetchPhotos();\n  }\n\n  fetchPhotos() {\n    axios.get('https://picsum.photos/list')\n      .then((res) => this.photos = shuffle(res.data));\n  }\n\n  set searchTerm(str) {\n    this._searchTerm = str.toLowerCase();\n  }\n\n  get searchTerm() {\n    return this._searchTerm;\n  }\n\n  set photos(arr) {\n    this._photos = arr;\n  }\n\n  get photos() {\n    if (!this.searchTerm) return this._photos;\n\n    return this._photos.filter((photo) => photo.author.toLowerCase().includes(this.searchTerm));\n  }\n}\n\ndecorate(Gallery, {\n  _photos: observable,\n  _searchTerm: observable,\n  photos: computed,\n  searchTerm: computed\n});\n\nexport default Gallery;","import { observable, decorate } from 'mobx';\n\nimport Gallery from './gallery';\n\nclass Store {\n  gallery = new Gallery();\n}\n\ndecorate(Store, { gallery: observable});\n\nexport default new Store();\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { page: 1, isGray: false }\n  }\n\n  loadMore = () => {\n    this.setState((oldState) => ({ page: oldState.page + 1 }))\n  };\n\n  toggleGray = () => {\n    this.setState((oldState) => ({ isGray: !oldState.isGray }))\n  };\n\n  search = (e) => {\n    const { value } = e.target;\n\n    this.props.store.gallery.searchTerm = value;\n\n    // reset page counter when search is cleared\n    if (!value) this.setState((oldState) => ({ page: 1 }));\n  };\n\n  render() {\n    let { photos }  = this.props.store.gallery;\n    let numOfPhotos = this.state.page * 30;\n\n    let photosUi = photos.slice(0, numOfPhotos).map((photo) =>\n      <Grid key={photo.id} item>\n        <Card style={{ width: '300px' }}>\n          <CardMedia\n            style={{ height: '300px' }}\n            image={`https://picsum.photos/${this.state.isGray ? 'g/' : ''}300/300?image=${photo.id}`}\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography component=\"p\">\n              {photo.author}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n\n    return (\n      <div className=\"App\">\n        <Grid container justify=\"center\" spacing={16}>\n          <Grid item xs={12} sm={10} md={8} lg={5} xl={3}>\n            <TextField\n              style={{ width: '100%' }}\n              id=\"outlined-search\"\n              label=\"Search photos\"\n              type=\"search\"\n              className=\"\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              onChange={(e) => this.search(e)}\n            />\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={16}>\n          <Grid item xs={12} sm={10} md={8} lg={5} xl={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={this.state.isGray}\n                  onChange={this.toggleGray}/>\n              }\n              label=\"Gray mode\"/>\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={16}>\n          <Grid item>\n            <Typography variant=\"h6\" gutterBottom>\n              displaying <span\n              style={{ fontWeight: 600 }}>{photosUi.length}</span> images\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={16}>\n          {photosUi}\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={16}>\n          <Grid item>\n            <Button onClick={this.loadMore} variant=\"contained\"\n                    color=\"primary\">Load more</Button>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default inject('store')(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport Store from './store';\nimport './index.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}